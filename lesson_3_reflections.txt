When would you want to create a remote repository rather than keeping all your 
work local?
    
	I would prefer a remote repository if I want to share the work with other 
	people and/or collaborate with them. If I use to work on different computers,
	it could also be a good idea to create a remote repository.


	
Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

	If we are working on something, we might want to finish our current work 
	before we sync with the remote repository again. Furthermore, you might want
	to keep working in a different direction than the remote repository so you 
	don't want any of the new changes to the code in the remote repository in
	your local code.

	
	
Describe the differences between forks, clones, and branches. When would you use 
one instead of another?

	A git branch is a concept that enables different lines of development. It
	creates a fork in the commit history of the project and allows you to better 
	structure your project by creating branches for every independent task that
	is performed on the repository (e.g. developing a new feature or fixing a 
	bug). A branch may be merged into another branch (e.g. when the task is done),
	completely discarded (e.g. when a feature does not work or is dropped) or
	exist along with other branches in the repository.
	A git clone is a complete copy of a git repository including all files and 
	their history. A clone can be used to imort an existing git repository to 
	another computer. You can also create a clone of a git repository on the same 
	computer.
	A fork is a concept of GitHub. You can fork git repositories of other GitHub 
	users so that a copy of the repository is created in your GitHub account. This
	is useful if you want to modify an existing project but you don't have the 
	permission to modify the existing git repository of the other user.
	
	
	
What is the benefit of having a copy of the last known state of the remote stored
locally?

	You can work offline with the last known state of the remote and when you are 
	back online you can push your changes to the remote by transfering only the 
	changes to the repository in compared to the last known state of the remote 
	(which should not be much data).
	
	
	
How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

	+ You would not need to understand the concepts of Git and GitHub
	+ You would not need to commit your changes manually
	- You will loose all adantages that come along with a version control system
	  like Git
	- It might be very difficult to collaborate with other people on the same 
	  project, especially when multiple people perform changes simultaniously
	- It might be much more difficult to find errors in your project since you
	  cannot use the commit history that shows all logical changes to the project
	  in the order they have been made
	- Working offline would be more difficult since you need to merge every file
	  carefully when you are back online
	- Doing experimental work would probably require you to make a copy of the
	  whole project to prevent you from breaking the working project (no branches)



When would you want to make changes in a separate branch rather than directly in
master? What benefits does each approach have?

	If the changes you are going to make may require a long time or if you do not
	have permission to change the master branch on the GitHub repository, you may
	want to work in a separate branch.
	+ You dont mess up your master branch with commits that do not work well. By
	  implementing the change in a separate branch, you can ensure that your 
	  changes work well before you commit them to the master branch
	- It is more cumbersome to stay up-to-date with changes that others making
	  while you are working in your separate branch