How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    We know that the bug was not there in the previous version so it must be 
	present in one of the differences between the two files. The lines that
	changed between the two versions are way less than the whole file.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You do not waste time with saving the same file over and over again under
	different names.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    + You can define the history so that every commit represents a small logical
	  change to the program
	+ Every commit is meaningful (in your opinion)
	- You need to know and remember when to commit your files. If you forget to
	  commit, you will bybass the advantages of version control

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It depends on the use-case whether commits with multiple files are needed. 
	For programming tasks, it is mandatory to be able to commit multiple files 
	in one commit to reflect that a logical change to the program needed changes
	in multiple files. However, if your files are independent from each other, it
	is easier to commit to commit each files separately since the software can 
	commit automatically in this case.

How can you use the commands git log and git diff to view the history of files?

    "git log" shows all versions of all files in the current repository together 
	with the information: 1. Who commited the file(s) 2. When did he/she commit
	the files and 3. What changes did he/she do? (Commit message)
	"git diff" shows all changes between two commits in detail so that you can
	figure out what exact changes were made to the file(s) between these two 
	commits.

How might using version control make you more confident to make changes that
could break something?

    With version control, you have the ability to go back to state where everything
	worked. If you commit regularly, this state should not be far back in time.
	So you have the insurance that you cannot cause much damage because a working
	solution is only one command away. This gives you the confidence to do any
	changes to the code you might think are meaningful or required but which you 
	won't try without version control because you are scared to break something.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to get into Android development and I'll use Git as version control for
	my first Android projects. I also want to use Git for all my code projects once
	I get comfortable with it.
