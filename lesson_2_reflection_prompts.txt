What happens when you initialize a repository? Why do you need to do it?
	The hidden folder .git is created where all the metadata used by git will be
	stored. Without git init, the folder would be a simple folder in the file 
	system. Git init makes it a git repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The working directory is the current state of all the files on the filesystem
	level while the staging area reflects all the changes that would be done to 
	the git repository when a commit would be executed right now. This way, you
	have more flexibility because you can decide which files should be included 
	in the next commit.

How can you use the staging area to make sure you have one commit per logical
change?
	The staging area contains all the files that will be contained in the next
	commit. You can see the differences in the files that you are about to commit
	in contrast to the last commit by exexuting git diff --staged. If there are
	changes that should be commited separately in another commit than the next
	one, you can remove the respective file(s) from the staging area. If there
	are any files that contain changes that correspond to the same logical change,
	you can add them to the staging area so that they will be a part of the next
	commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Typical situations where branches are useful are experimental changes like
	trying out a new feature. By creating a branch, the main "line" of commits
	is not affected by the experimental changes. If the new changes to do working
	out as expected, the branch can be deleted and we can continue working on the
	master branch as if nothing happened. If the changes work well, we can merge
	the branch with our master branch to include the new changes there. Branches
	help us to organize our commit structure and keep it more readable.
	
How do the diagrams help you visualize the branch structure?
	The diagrams provide a clear overview about the reachability of commits and 
	how branches are organized in the respective git repository.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	After the merge, the master branch contains all the commits from the coins 
	branch in addition to the commits that were part of the master branch
	before. The diagram clearly illustrates that a new commit is created for the
	merge operation and that this commit has multiple parent commits. After the
	merge, the label of the branch that has been merged into another branch may
	be deleted since its commits are now part of the other branch.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	One advantage of automatic merging is obviously the reduced effort for the 
	user since the merge operation is done automatically. Git only uses automatic
	merging when it is considered safe, i.e. when a file has not been changed 
	differently in the same place by the involved branches.
	Manual merging allows the user to decide which changes should be applied to 
	the files in the merge commit. If a file has been changed in multiple branches,
	the user may incorporate all changes in the file and then do the merge. This way,
	the user can ensure that no bugs or other errors are introduced by git when
	automatically merging the file. However, it requires interaction and analysis
	by the user which can be tedious if it is required often or if the changes are
	extensive.